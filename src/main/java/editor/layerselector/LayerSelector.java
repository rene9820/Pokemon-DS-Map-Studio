/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.layerselector;

import editor.handler.MapEditorHandler;
import editor.handler.MapGrid;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import javax.swing.SwingUtilities;
import utils.Utils;

/**
 *
 * @author Trifindo
 */
public class LayerSelector extends javax.swing.JPanel {

    private MapEditorHandler handler;

    private BufferedImage[] layersOnImgs = new BufferedImage[MapGrid.numLayers];
    private BufferedImage[] layersOffImgs = new BufferedImage[MapGrid.numLayers];

    /**
     * Creates new form LayerSelector
     */
    public LayerSelector() {
        initComponents();

        setPreferredSize(new Dimension(MapGrid.DEFAULT_TILE_SIZE,
                MapGrid.DEFAULT_TILE_SIZE * MapGrid.numLayers));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (handler != null) {
            int index = evt.getY() / MapGrid.DEFAULT_TILE_SIZE;
            if (index >= 0 && index < MapGrid.numLayers) {
                if (SwingUtilities.isLeftMouseButton(evt)) {
                    handler.setActiveTileLayer(index);
                } else if (SwingUtilities.isRightMouseButton(evt)) {
                    handler.invertLayerState(index);
                } else if(SwingUtilities.isMiddleMouseButton(evt)) {
                    handler.setOnlyActiveTileLayer(index);
                }
                repaint();
            }
        }

    }//GEN-LAST:event_formMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (handler != null && layersOffImgs != null && layersOnImgs != null) {
            for (int i = 0; i < MapGrid.numLayers; i++) {
                BufferedImage img;
                if (handler.renderLayers[i]) {
                    img = layersOnImgs[i];
                } else {
                    img = layersOffImgs[i];
                }
                g.drawImage(img, 0, i * MapGrid.DEFAULT_TILE_SIZE, null);
            }
            g.setColor(new Color(255, 100, 100, 100));
            g.fillRect(0, handler.getActiveLayerIndex() * MapGrid.DEFAULT_TILE_SIZE,
                    MapGrid.DEFAULT_TILE_SIZE - 1, MapGrid.DEFAULT_TILE_SIZE - 1);
            g.setColor(Color.red);
            g.drawRect(0, handler.getActiveLayerIndex() * MapGrid.DEFAULT_TILE_SIZE,
                    MapGrid.DEFAULT_TILE_SIZE - 1, MapGrid.DEFAULT_TILE_SIZE - 1);

        }
    }

    public void init(MapEditorHandler handler) {
        this.handler = handler;

        layersOnImgs = Utils.loadVerticalImageArrayAsResource(
                "/imgs/layersSelected.png",
                MapGrid.numLayers);

        layersOffImgs = Utils.loadVerticalImageArrayAsResource(
                "/imgs/layersNoSelected.png",
                MapGrid.numLayers);
    }

}
